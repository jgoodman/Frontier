#!/usr/bin/perl
use strict;
use warnings;
use Proc::Daemon;
use Log::Dispatch;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper;
use Time::HiRes qw(sleep);
use DBD::SQLite;
use PerlIO::tee; # allow me to redirect "print" to the log file
require Frontier::Common;
use Math::Trig;
use config;

=head1 NAME

frontier_updater - update all board

=head1 SYNOPSIS

Deamonize and update all boards.

./bin/frontier_ship -d

=head1 OPTIONS

=over 4

=item -h,--help

This help file

=item -d,--daemonize

By default this script does not daemonize.  However if you wish, you can.

=back

=cut

my $args = {};
GetOptions (
"d|daemonize" => \$args->{'daemonize'},
"h|help" => \$args->{'help'},
) or pod2usage(2);
pod2usage(1) if $args->{'help'};

Proc::Daemon::Init() if $args->{'daemonize'};

my $log = Log::Dispatch->new(
    outputs => [
        [ 'File',   min_level => 'info', filename => '/var/log/frontier_server/frontier_updater.log' ],
        [ 'Screen', min_level => 'info' ],
    ],
);
*STDOUT->push_layer(tee => [$log->outputs()]->[1]->{'fh'}); # copy print to the log

$log->info('My pid: '.$$."\n");
$log->info("Starting time: ".time()."\n");

my $keep_going = 1;
$SIG{HUP}  = sub { $log->warning("Caught SIGHUP: exiting gracefully\n"); $keep_going = 0; };
$SIG{INT}  = sub { $log->warning("Caught SIGINT: exiting gracefully\n"); $keep_going = 0; };
$SIG{QUIT} = sub { $log->warning("Caught SIGQUIT: exiting gracefully\n"); $keep_going = 0; };
$SIG{TERM} = sub { $log->warning("Caught SIGTERM: exiting gracefully\n"); $keep_going = 0; };
$SIG{__WARN__} = \&sig_warn;
sub sig_warn { $log->warning(@_); }

my $dbh = Frontier::Common::new_dbh();

while ($keep_going++) {
    main();
    sleep 0.1;
}
$log->info("Stopping time: ".time()."\n");

sub main {
    my $sth = $dbh->prepare('SELECT * FROM boards');
    $sth->execute();
    my $boards = $sth->fetchall_arrayref({});
    board($_->{'board_name'}) foreach(@$boards);
}

sub board {
    my $board = shift;
    my $sth = $dbh->prepare('SELECT * FROM objects WHERE board_id = (SELECT board_id FROM boards WHERE board_name = ?) ORDER BY object_id');
    $sth->execute($board);
    my $ships = $sth->fetchall_arrayref({});
    ship($_) foreach @$ships;
    if ($board eq 'testing') {
        $dbh->do('UPDATE objects SET object_radians = object_radians - 0.05 WHERE object_id <= 4'); # TODO REMOVE ME
        $dbh->do('UPDATE objects SET x = 0 WHERE object_id = 1'); # TODO REMOVE ME
        $dbh->do('UPDATE objects SET y = 0 WHERE object_id = 1'); # TODO REMOVE ME
        $dbh->do('UPDATE objects SET x = cos(object_radians)*400 + 1000 WHERE object_id = 2'); # TODO REMOVE ME
        $dbh->do('UPDATE objects SET y = sin(object_radians)*400 - 2000 WHERE object_id = 2'); # TODO REMOVE ME
        $dbh->do('UPDATE objects SET x = cos(object_radians)*200 WHERE object_id = 3'); # TODO REMOVE ME
        $dbh->do('UPDATE objects SET y = sin(object_radians)*200 WHERE object_id = 3'); # TODO REMOVE ME
        #$dbh->do('UPDATE objects SET x = 200 WHERE object_id = 3'); # TODO REMOVE ME
        #$dbh->do('UPDATE objects SET y = 0 WHERE object_id = 3'); # TODO REMOVE ME
        $dbh->do('UPDATE objects SET x = (select x * 30 from objects where object_id = 3) WHERE object_id = 4'); # TODO REMOVE ME
        $dbh->do('UPDATE objects SET y = (select y * 30 from objects where object_id = 3) WHERE object_id = 4'); # TODO REMOVE ME
        my $sthx = $dbh->prepare('SELECT * FROM ships LEFT JOIN objects USING (object_id) WHERE ships.board_id = (SELECT board_id FROM boards WHERE board_name = ?)');
        $sthx->execute($board);
        my $objx = $sthx->fetchall_hashref('object_id');
        my $dd = Frontier::Common::radians($objx->{1},$objx->{4});
        $dbh->do('UPDATE objects SET object_radians = '.$dd.' WHERE object_id = 1'); # TODO REMOVE ME
        $dbh->do('UPDATE objects SET move_radians = object_radians WHERE object_id <= 4'); # TODO REMOVE ME
    }
}

sub ship {
    my ($ship) = @_;
    $dbh->do('UPDATE objects SET object_radians = object_radians - 2*3.14159265358 WHERE object_radians > 2*3.14159265358');
    $dbh->do('UPDATE objects SET object_radians = object_radians + 2*3.14159265358 WHERE object_radians < 0');
return if $ship->{'object_id'} <= 4;

my $dx = cos($ship->{'move_radians'})*$ship->{'move_speed'} + cos($ship->{'object_radians'})*$ship->{'ship_engine_power'};
my $dy = sin($ship->{'move_radians'})*$ship->{'move_speed'} + sin($ship->{'object_radians'})*$ship->{'ship_engine_power'};
my $speed = (($dx**2)+($dy**2))**0.5;
$speed = 5 if $speed > 5;
my $rad = $dx == 0 ? 0 : atan($dy/$dx); # TODO find quandrant
if      ($dx <  0 && $dy >= 0) { $rad = $rad + pi
} elsif ($dx <  0 && $dy <  0) { $rad = pi - $rad
} elsif ($dx >= 0 && $dy <  0) { $rad = $rad
} else { $rad = -$rad;
}
while ($rad > 2*pi) { $rad -= 2*pi }
while ($rad < 0 ) { $rad += 2*pi }

    $dbh->do('UPDATE objects SET move_speed = ?, move_radians = ? 
                         WHERE object_id = ?',{},$speed,$rad, $ship->{'object_id'});
    $dbh->do('UPDATE objects SET x = x + cos(move_radians)*move_speed,
                               y = y + sin(move_radians)*move_speed,
                               move_speed = move_speed * 1 /* make movement easier to cap */
                         WHERE object_id = ?',{},$ship->{'object_id'});
}
